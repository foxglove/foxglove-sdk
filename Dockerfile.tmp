ARG ROS_DISTRIBUTION=jazzy
FROM ros:$ROS_DISTRIBUTION-ros-base

# Update apt keys for EOL distros. For current distros this is already in the base docker image.
# https://github.com/osrf/docker_images/commit/eb5634cf92ba079897e44fb7541d3b78aa6cf717
# https://discourse.ros.org/t/ros-signing-key-migration-guide/43937
ADD --checksum=sha256:1600cb8cc28258a39bffc1736a75bcbf52d1f2db371a4d020c1b187d2a5a083b https://github.com/ros-infrastructure/ros-apt-source/releases/download/1.1.0/ros2-apt-source_1.1.0.jammy_all.deb /tmp/ros2-apt-source.deb
RUN (dpkg-query -s ros2-apt-source || apt-get install /tmp/ros2-apt-source.deb) \
  && rm -f /tmp/ros2-apt-source.deb \
  && rm -rf /var/lib/apt/lists/*

# Install rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"
RUN rustup toolchain install nightly --component rust-src
RUN rustup toolchain install ${MSRV_RUST_VERSION}
RUN rustup component add rustfmt clippy

# Install clang and set as default compiler.
RUN apt-get update && apt-get install -y --no-install-recommends \
  clang \
  && rm -rf /var/lib/apt/lists/*

ENV CC=clang
ENV CXX=clang++

# Set environment and working directory
ENV ROS_WS /ros2_ws
WORKDIR $ROS_WS

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
  nlohmann-json3-dev \
  libasio-dev \
  libboost-all-dev \
  libssl-dev \
  libwebsocketpp-dev \
  && rm -rf /var/lib/apt/lists/*

# Add package.xml so we can install package dependencies.
COPY ros/src/foxglove_bridge/package.xml $ROS_WS/src/ros/src/foxglove_bridge/package.xml

# Install rosdep dependencies
RUN . /opt/ros/$ROS_DISTRO/setup.sh && \
    apt-get update && rosdep update --include-eol-distros && rosdep install -y \
      --from-paths \
        src \
      --ignore-src \
    && rm -rf /var/lib/apt/lists/*

# Add common files and ROS 2 source code
COPY Cargo.toml $ROS_WS/src/Cargo.toml
COPY Cargo.lock $ROS_WS/src/Cargo.lock
COPY rust $ROS_WS/src/rust
COPY python $ROS_WS/src/python
COPY c $ROS_WS/src/c
COPY cpp $ROS_WS/src/cpp
COPY ros/src/foxglove_bridge $ROS_WS/src/ros/src/foxglove_bridge
ARG USE_ASIO_STANDALONE=ON

WORKDIR $ROS_WS/src/ros/src/foxglove_bridge

# Build the ROS 2 workspace
RUN . /opt/ros/$ROS_DISTRO/setup.sh \
  && colcon build --event-handlers console_direct+ --cmake-args -DUSE_ASIO_STANDALONE=$USE_ASIO_STANDALONE

# source workspace from entrypoint
RUN sed --in-place \
      's|^source .*|source "$ROS_WS/src/ros/src/foxglove_bridge/install/setup.bash"|' \
      /ros_entrypoint.sh


# Run foxglove_bridge
CMD ["ros2", "run", "foxglove_bridge", "foxglove_bridge"]
