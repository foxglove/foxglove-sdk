name: Python

on:
  push:
    branches: [main]
    tags: ["**"]
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - uses: astral-sh/setup-uv@v7
      - run: make -f Container.mk lint-python

  lint-and-test-sdk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install common dependencies
        uses: ./.github/actions/common-deps

      - run: corepack enable
      - uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: yarn

      - run: make -f Container.mk test-python

  playground-wasm:
    runs-on: ubuntu-latest
    needs: [sdist]
    steps:
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: wheels-sdist
      - name: Unpack sdist
        run: tar xzf foxglove_sdk-*.tar.gz --strip-components 1

      - uses: astral-sh/setup-uv@v7
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # Use an older rust toolchain to avoid emscripten build error "Unknown option '--enable-bulk-memory-opt'"
          # similar to https://github.com/godotengine/godot/issues/100841
          toolchain: 1.86.0
          target: wasm32-unknown-emscripten

      - name: Set up Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          # Use an older emscripten version to avoid errors with building Rust packages https://github.com/pyodide/pyodide/pull/5646#issuecomment-3215934664
          ./emsdk/emsdk install 3.1.58
          ./emsdk/emsdk activate 3.1.58
          echo "$(pwd)/emsdk" >> $GITHUB_PATH
          echo "$(pwd)/emsdk/upstream/emscripten" >> $GITHUB_PATH

      - name: Build wheel
        # Maturin's PEP 517 backend doesn't support cross-compilation, so we run `maturin
        # build` directly, as we do when building wheels with `PyO3/maturin-action`.
        run: uv run maturin build --release --out dist --target wasm32-unknown-emscripten -i python3.12
        env:
          CFLAGS: "-fPIC"
          RUSTC_BOOTSTRAP: "1"
          MATURIN_NO_MISSING_BUILD_BACKEND_WARNING: 1

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: playground-wasm
          path: dist

  playground:
    runs-on: ubuntu-latest
    needs: [playground-wasm]
    defaults:
      run:
        working-directory: playground
    permissions:
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Download wheel
        uses: actions/download-artifact@v5
        with:
          name: playground-wasm
          path: playground/public
      - run: yarn install
      - run: yarn build
      - uses: cloudflare/pages-action@v1.5.0
        if: ${{ !github.event.pull_request.head.repo.fork }} # Only run if not a fork
        id: deploy
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          gitHubToken: ${{ secrets.FOXGLOVEBOT_GITHUB_TOKEN }}
          branch: ${{ github.head_ref || github.ref_name }}
          projectName: foxglove-sdk-playground
          directory: playground/dist

  schemas:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "29.3"

      - name: Install Flatbuffer compiler
        run: |
          curl -LO https://github.com/google/flatbuffers/releases/download/v23.1.21/Linux.flatc.binary.clang++-12.zip
          echo "359dbbf56153cc1b022170a228adfde4199f67dc  Linux.flatc.binary.clang++-12.zip" | shasum -a 1 -c
          unzip Linux.flatc.binary.clang++-12.zip
          rm Linux.flatc.binary.clang++-12.zip
          sudo mv flatc /usr/local/bin

      - uses: astral-sh/setup-uv@v7

      - run: make build
        working-directory: python

      - run: make test
        working-directory: python

      - name: Publish foxglove-schemas-flatbuffer
        if: startsWith(github.ref, 'refs/tags/python/foxglove-schemas-flatbuffer/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: python/foxglove-schemas-flatbuffer/dist

      - name: Publish foxglove-schemas-protobuf
        if: startsWith(github.ref, 'refs/tags/python/foxglove-schemas-protobuf/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: python/foxglove-schemas-protobuf/dist

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: [sdist]
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: wheels-sdist
      - name: Unpack sdist
        run: tar xzf foxglove_sdk-*.tar.gz --strip-components 1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
          manylinux: auto
          docker-options: "--env MATURIN_NO_MISSING_BUILD_BACKEND_WARNING=1"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    needs: [sdist]
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: wheels-sdist
      - name: Unpack sdist
        run: tar xzf foxglove_sdk-*.tar.gz --strip-components 1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
          manylinux: musllinux_1_2
          docker-options: "--env MATURIN_NO_MISSING_BUILD_BACKEND_WARNING=1"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: [sdist]
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          architecture: ${{ matrix.platform.target }}
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: wheels-sdist
      - name: Unpack sdist
        shell: bash
        run: tar xzf foxglove_sdk-*.tar.gz --strip-components 1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter python
          sccache: "false"
          docker-options: "--env MATURIN_NO_MISSING_BUILD_BACKEND_WARNING=1"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: [sdist]
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: wheels-sdist
      - name: Unpack sdist
        run: tar xzf foxglove_sdk-*.tar.gz --strip-components 1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
          docker-options: "--env MATURIN_NO_MISSING_BUILD_BACKEND_WARNING=1"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: astral-sh/setup-uv@v7
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Build sdist
        run: uv build --sdist
        working-directory: python/foxglove-sdk
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: python/foxglove-sdk/dist

  # The maturin jobs were generated by `maturin generate-ci`.
  # We modified them quite a bit, so there should be no need to regenerate
  # them unless the maturin API changes substantially.
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/sdk/v')
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: python/foxglove-sdk
      - run: find python/foxglove-sdk/wheels-*
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "python/foxglove-sdk/wheels-*/*"
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          working-directory: python/foxglove-sdk
          args: --non-interactive --skip-existing wheels-*/*

  test-sdk-examples:
    runs-on: ubuntu-latest
    needs: [lint-and-test-sdk]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - uses: astral-sh/setup-uv@v7
      - run: corepack enable
      - uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: yarn
      - run: yarn install
      - run: yarn run-python-sdk-examples
