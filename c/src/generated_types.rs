// Generated by https://github.com/foxglove/foxglove-sdk

use foxglove::bytes::Bytes;
use std::ffi::c_uchar;
use std::mem::ManuallyDrop;

use crate::{
    log_msg_to_channel, Duration, FoxgloveChannel, FoxgloveError, FoxgloveString, Timestamp,
};

/// A primitive representing an arrow
#[repr(C)]
pub struct ArrowPrimitive {
    /// Position of the arrow's tail and orientation of the arrow. Identity orientation means the arrow points in the +x direction.
    pub pose: *const Pose,

    /// Length of the arrow shaft
    pub shaft_length: f64,

    /// Diameter of the arrow shaft
    pub shaft_diameter: f64,

    /// Length of the arrow head
    pub head_length: f64,

    /// Diameter of the arrow head
    pub head_diameter: f64,

    /// Color of the arrow
    pub color: *const Color,
}

impl ArrowPrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::ArrowPrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::ArrowPrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            shaft_length: self.shaft_length,
            shaft_diameter: self.shaft_diameter,
            head_length: self.head_length,
            head_diameter: self.head_diameter,
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_arrow_primitive(mut msg: ManuallyDrop<foxglove::schemas::ArrowPrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// Camera calibration parameters
#[repr(C)]
pub struct CameraCalibration {
    /// Timestamp of calibration data
    pub timestamp: *const Timestamp,

    /// Frame of reference for the camera. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image.
    pub frame_id: FoxgloveString,

    /// Image width
    pub width: u32,

    /// Image height
    pub height: u32,

    /// Name of distortion model
    ///
    /// Supported parameters: `plumb_bob` (k1, k2, p1, p2, k3) and `rational_polynomial` (k1, k2, p1, p2, k3, k4, k5, k6). Distortion models are based on [OpenCV's](https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html) [pinhole camera model](https://en.wikipedia.org/wiki/Distortion_%28optics%29#Software_correction). This is the same [implementation used by ROS](http://docs.ros.org/en/diamondback/api/image_geometry/html/c++/pinhole__camera__model_8cpp_source.html)
    pub distortion_model: FoxgloveString,

    /// Distortion parameters
    pub d: *const f64,
    pub d_count: usize,

    /// Intrinsic camera matrix (3x3 row-major matrix)
    ///
    /// A 3x3 row-major matrix for the raw (distorted) image.
    ///
    /// Projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx, fy) and principal point (cx, cy).
    ///
    /// ```
    ///     [fx  0 cx]
    /// K = [ 0 fy cy]
    ///     [ 0  0  1]
    /// ```
    ///
    pub k: [f64; 9],

    /// Rectification matrix (stereo cameras only, 3x3 row-major matrix)
    ///
    /// A rotation matrix aligning the camera coordinate system to the ideal stereo image plane so that epipolar lines in both stereo images are parallel.
    pub r: [f64; 9],

    /// Projection/camera matrix (3x4 row-major matrix)
    ///
    /// ```
    ///     [fx'  0  cx' Tx]
    /// P = [ 0  fy' cy' Ty]
    ///     [ 0   0   1   0]
    /// ```
    ///
    /// By convention, this matrix specifies the intrinsic (camera) matrix of the processed (rectified) image. That is, the left 3x3 portion is the normal camera intrinsic matrix for the rectified image.
    ///
    /// It projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx', fy') and principal point (cx', cy') - these may differ from the values in K.
    ///
    /// For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will also have R = the identity and P[1:3,1:3] = K.
    ///
    /// For a stereo pair, the fourth column [Tx Ty 0]' is related to the position of the optical center of the second camera in the first camera's frame. We assume Tz = 0 so both cameras are in the same stereo image plane. The first camera always has Tx = Ty = 0. For the right (second) camera of a horizontal stereo pair, Ty = 0 and Tx = -fx' * B, where B is the baseline between the cameras.
    ///
    /// Given a 3D point [X Y Z]', the projection (x, y) of the point onto the rectified image is given by:
    ///
    /// ```
    /// [u v w]' = P * [X Y Z 1]'
    ///        x = u / w
    ///        y = v / w
    /// ```
    ///
    /// This holds for both images of a stereo pair.
    ///
    pub p: [f64; 12],
}

impl CameraCalibration {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::CameraCalibration>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CameraCalibration>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CameraCalibration {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            width: self.width,
            height: self.height,
            distortion_model: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.distortion_model.as_ptr() as *mut _,
                    self.distortion_model.len(),
                    self.distortion_model.len(),
                ))
            }
            .map_err(|e| {
                foxglove::FoxgloveError::Utf8Error(format!("distortion_model invalid: {}", e))
            })?,
            d: unsafe { Vec::from_raw_parts(self.d as *mut f64, self.d_count, self.d_count) },
            k: unsafe {
                Vec::from_raw_parts(self.k.as_ptr() as *mut f64, self.k.len(), self.k.len())
            },
            r: unsafe {
                Vec::from_raw_parts(self.r.as_ptr() as *mut f64, self.r.len(), self.r.len())
            },
            p: unsafe {
                Vec::from_raw_parts(self.p.as_ptr() as *mut f64, self.p.len(), self.p.len())
            },
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_camera_calibration(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&CameraCalibration>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { CameraCalibration::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_camera_calibration(msg);
            e
        }
        Err(e) => {
            tracing::error!("CameraCalibration: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_camera_calibration(mut msg: ManuallyDrop<foxglove::schemas::CameraCalibration>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A circle annotation on a 2D image
#[repr(C)]
pub struct CircleAnnotation {
    /// Timestamp of circle
    pub timestamp: *const Timestamp,

    /// Center of the circle in 2D image coordinates (pixels).
    /// The coordinate uses the top-left corner of the top-left pixel of the image as the origin.
    pub position: *const Point2,

    /// Circle diameter in pixels
    pub diameter: f64,

    /// Line thickness in pixels
    pub thickness: f64,

    /// Fill color
    pub fill_color: *const Color,

    /// Outline color
    pub outline_color: *const Color,
}

impl CircleAnnotation {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::CircleAnnotation>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CircleAnnotation>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CircleAnnotation {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            position: unsafe { self.position.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            diameter: self.diameter,
            thickness: self.thickness,
            fill_color: unsafe { self.fill_color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            outline_color: unsafe { self.outline_color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_circle_annotation(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&CircleAnnotation>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { CircleAnnotation::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_circle_annotation(msg);
            e
        }
        Err(e) => {
            tracing::error!("CircleAnnotation: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_circle_annotation(mut msg: ManuallyDrop<foxglove::schemas::CircleAnnotation>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A color in RGBA format
#[repr(C)]
pub struct Color {
    /// Red value between 0 and 1
    pub r: f64,

    /// Green value between 0 and 1
    pub g: f64,

    /// Blue value between 0 and 1
    pub b: f64,

    /// Alpha value between 0 and 1
    pub a: f64,
}

impl Color {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Color>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Color>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Color {
            r: self.r,
            g: self.g,
            b: self.b,
            a: self.a,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_color(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Color>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Color::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_color(msg);
            e
        }
        Err(e) => {
            tracing::error!("Color: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_color(mut msg: ManuallyDrop<foxglove::schemas::Color>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A compressed image
#[repr(C)]
pub struct CompressedImage {
    /// Timestamp of image
    pub timestamp: *const Timestamp,

    /// Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image.
    pub frame_id: FoxgloveString,

    /// Compressed image data
    pub data: *const c_uchar,
    pub data_len: usize,

    /// Image format
    ///
    /// Supported values: `jpeg`, `png`, `webp`, `avif`
    pub format: FoxgloveString,
}

impl CompressedImage {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::CompressedImage>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CompressedImage>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CompressedImage {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
            format: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.format.as_ptr() as *mut _,
                    self.format.len(),
                    self.format.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("format invalid: {}", e)))?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_compressed_image(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&CompressedImage>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { CompressedImage::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_compressed_image(msg);
            e
        }
        Err(e) => {
            tracing::error!("CompressedImage: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_compressed_image(mut msg: ManuallyDrop<foxglove::schemas::CompressedImage>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A single frame of a compressed video bitstream
#[repr(C)]
pub struct CompressedVideo {
    /// Timestamp of video frame
    pub timestamp: *const Timestamp,

    /// Frame of reference for the video.
    ///
    /// The origin of the frame is the optical center of the camera. +x points to the right in the video, +y points down, and +z points into the plane of the video.
    pub frame_id: FoxgloveString,

    /// Compressed video frame data.
    ///
    /// For packet-based video codecs this data must begin and end on packet boundaries (no partial packets), and must contain enough video packets to decode exactly one image (either a keyframe or delta frame). Note: Foxglove does not support video streams that include B frames because they require lookahead.
    ///
    /// Specifically, the requirements for different `format` values are:
    ///
    /// - `h264`
    ///   - Use Annex B formatted data
    ///   - Each CompressedVideo message should contain enough NAL units to decode exactly one video frame
    ///   - Each message containing a key frame (IDR) must also include a SPS NAL unit
    ///
    /// - `h265` (HEVC)
    ///   - Use Annex B formatted data
    ///   - Each CompressedVideo message should contain enough NAL units to decode exactly one video frame
    ///   - Each message containing a key frame (IRAP) must also include relevant VPS/SPS/PPS NAL units
    ///
    /// - `vp9`
    ///   - Each CompressedVideo message should contain exactly one video frame
    ///
    /// - `av1`
    ///   - Use the "Low overhead bitstream format" (section 5.2)
    ///   - Each CompressedVideo message should contain enough OBUs to decode exactly one video frame
    ///   - Each message containing a key frame must also include a Sequence Header OBU
    pub data: *const c_uchar,
    pub data_len: usize,

    /// Video format.
    ///
    /// Supported values: `h264`, `h265`, `vp9`, `av1`.
    ///
    /// Note: compressed video support is subject to hardware limitations and patent licensing, so not all encodings may be supported on all platforms. See more about [H.265 support](https://caniuse.com/hevc), [VP9 support](https://caniuse.com/webm), and [AV1 support](https://caniuse.com/av1).
    pub format: FoxgloveString,
}

impl CompressedVideo {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::CompressedVideo>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CompressedVideo>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CompressedVideo {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
            format: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.format.as_ptr() as *mut _,
                    self.format.len(),
                    self.format.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("format invalid: {}", e)))?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_compressed_video(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&CompressedVideo>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { CompressedVideo::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_compressed_video(msg);
            e
        }
        Err(e) => {
            tracing::error!("CompressedVideo: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_compressed_video(mut msg: ManuallyDrop<foxglove::schemas::CompressedVideo>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a cylinder, elliptic cylinder, or truncated cone
#[repr(C)]
pub struct CylinderPrimitive {
    /// Position of the center of the cylinder and orientation of the cylinder. The flat face(s) are perpendicular to the z-axis.
    pub pose: *const Pose,

    /// Size of the cylinder's bounding box
    pub size: *const Vector3,

    /// 0-1, ratio of the diameter of the cylinder's bottom face (min z) to the bottom of the bounding box
    pub bottom_scale: f64,

    /// 0-1, ratio of the diameter of the cylinder's top face (max z) to the top of the bounding box
    pub top_scale: f64,

    /// Color of the cylinder
    pub color: *const Color,
}

impl CylinderPrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CylinderPrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CylinderPrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            size: unsafe { self.size.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            bottom_scale: self.bottom_scale,
            top_scale: self.top_scale,
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_cylinder_primitive(mut msg: ManuallyDrop<foxglove::schemas::CylinderPrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a cube or rectangular prism
#[repr(C)]
pub struct CubePrimitive {
    /// Position of the center of the cube and orientation of the cube
    pub pose: *const Pose,

    /// Size of the cube along each axis
    pub size: *const Vector3,

    /// Color of the cube
    pub color: *const Color,
}

impl CubePrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::CubePrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::CubePrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            size: unsafe { self.size.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_cube_primitive(mut msg: ManuallyDrop<foxglove::schemas::CubePrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A transform between two reference frames in 3D space
#[repr(C)]
pub struct FrameTransform {
    /// Timestamp of transform
    pub timestamp: *const Timestamp,

    /// Name of the parent frame
    pub parent_frame_id: FoxgloveString,

    /// Name of the child frame
    pub child_frame_id: FoxgloveString,

    /// Translation component of the transform
    pub translation: *const Vector3,

    /// Rotation component of the transform
    pub rotation: *const Quaternion,
}

impl FrameTransform {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::FrameTransform>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::FrameTransform>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::FrameTransform {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            parent_frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.parent_frame_id.as_ptr() as *mut _,
                    self.parent_frame_id.len(),
                    self.parent_frame_id.len(),
                ))
            }
            .map_err(|e| {
                foxglove::FoxgloveError::Utf8Error(format!("parent_frame_id invalid: {}", e))
            })?,
            child_frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.child_frame_id.as_ptr() as *mut _,
                    self.child_frame_id.len(),
                    self.child_frame_id.len(),
                ))
            }
            .map_err(|e| {
                foxglove::FoxgloveError::Utf8Error(format!("child_frame_id invalid: {}", e))
            })?,
            translation: unsafe { self.translation.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            rotation: unsafe { self.rotation.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_frame_transform(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&FrameTransform>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { FrameTransform::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_frame_transform(msg);
            e
        }
        Err(e) => {
            tracing::error!("FrameTransform: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_frame_transform(mut msg: ManuallyDrop<foxglove::schemas::FrameTransform>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// An array of FrameTransform messages
#[repr(C)]
pub struct FrameTransforms {
    /// Array of transforms
    pub transforms: *const *const FrameTransform,
    pub transforms_count: usize,
}

impl FrameTransforms {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::FrameTransforms>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::FrameTransforms>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::FrameTransforms {
            transforms: unsafe {
                std::slice::from_raw_parts(self.transforms, self.transforms_count)
            }
            .iter()
            .flat_map(|m| unsafe {
                m.as_ref()
                    .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
            })
            .collect::<Result<Vec<_>, _>>()?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_frame_transforms(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&FrameTransforms>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { FrameTransforms::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_frame_transforms(msg);
            e
        }
        Err(e) => {
            tracing::error!("FrameTransforms: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_frame_transforms(mut msg: ManuallyDrop<foxglove::schemas::FrameTransforms>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.transforms) {
        free_frame_transform(ManuallyDrop::new(nested));
    }
}

/// GeoJSON data for annotating maps
#[repr(C)]
pub struct GeoJson {
    /// GeoJSON data encoded as a UTF-8 string
    pub geojson: FoxgloveString,
}

impl GeoJson {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::GeoJson>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::GeoJson>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::GeoJson {
            geojson: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.geojson.as_ptr() as *mut _,
                    self.geojson.len(),
                    self.geojson.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("geojson invalid: {}", e)))?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_geo_json(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&GeoJson>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { GeoJson::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_geo_json(msg);
            e
        }
        Err(e) => {
            tracing::error!("GeoJson: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_geo_json(mut msg: ManuallyDrop<foxglove::schemas::GeoJson>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A 2D grid of data
#[repr(C)]
pub struct Grid {
    /// Timestamp of grid
    pub timestamp: *const Timestamp,

    /// Frame of reference
    pub frame_id: FoxgloveString,

    /// Origin of grid's corner relative to frame of reference; grid is positioned in the x-y plane relative to this origin
    pub pose: *const Pose,

    /// Number of grid columns
    pub column_count: u32,

    /// Size of single grid cell along x and y axes, relative to `pose`
    pub cell_size: *const Vector2,

    /// Number of bytes between rows in `data`
    pub row_stride: u32,

    /// Number of bytes between cells within a row in `data`
    pub cell_stride: u32,

    /// Fields in `data`. `red`, `green`, `blue`, and `alpha` are optional for customizing the grid's color.
    pub fields: *const *const PackedElementField,
    pub fields_count: usize,

    /// Grid cell data, interpreted using `fields`, in row-major (y-major) order
    pub data: *const c_uchar,
    pub data_len: usize,
}

impl Grid {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Grid>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Grid>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Grid {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            column_count: self.column_count,
            cell_size: unsafe { self.cell_size.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            row_stride: self.row_stride,
            cell_stride: self.cell_stride,
            fields: unsafe { std::slice::from_raw_parts(self.fields, self.fields_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_grid(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Grid>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Grid::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_grid(msg);
            e
        }
        Err(e) => {
            tracing::error!("Grid: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_grid(mut msg: ManuallyDrop<foxglove::schemas::Grid>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.fields) {
        free_packed_element_field(ManuallyDrop::new(nested));
    }
}

/// Array of annotations for a 2D image
#[repr(C)]
pub struct ImageAnnotations {
    /// Circle annotations
    pub circles: *const *const CircleAnnotation,
    pub circles_count: usize,

    /// Points annotations
    pub points: *const *const PointsAnnotation,
    pub points_count: usize,

    /// Text annotations
    pub texts: *const *const TextAnnotation,
    pub texts_count: usize,
}

impl ImageAnnotations {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::ImageAnnotations>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::ImageAnnotations>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::ImageAnnotations {
            circles: unsafe { std::slice::from_raw_parts(self.circles, self.circles_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            points: unsafe { std::slice::from_raw_parts(self.points, self.points_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            texts: unsafe { std::slice::from_raw_parts(self.texts, self.texts_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_image_annotations(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&ImageAnnotations>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { ImageAnnotations::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_image_annotations(msg);
            e
        }
        Err(e) => {
            tracing::error!("ImageAnnotations: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_image_annotations(mut msg: ManuallyDrop<foxglove::schemas::ImageAnnotations>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.circles) {
        free_circle_annotation(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.points) {
        free_points_annotation(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.texts) {
        free_text_annotation(ManuallyDrop::new(nested));
    }
}

/// A key with its associated value
#[repr(C)]
pub struct KeyValuePair {
    /// Key
    pub key: FoxgloveString,

    /// Value
    pub value: FoxgloveString,
}

impl KeyValuePair {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::KeyValuePair>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::KeyValuePair>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::KeyValuePair {
            key: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.key.as_ptr() as *mut _,
                    self.key.len(),
                    self.key.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("key invalid: {}", e)))?,
            value: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.value.as_ptr() as *mut _,
                    self.value.len(),
                    self.value.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("value invalid: {}", e)))?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_key_value_pair(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&KeyValuePair>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { KeyValuePair::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_key_value_pair(msg);
            e
        }
        Err(e) => {
            tracing::error!("KeyValuePair: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_key_value_pair(mut msg: ManuallyDrop<foxglove::schemas::KeyValuePair>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A single scan from a planar laser range-finder
#[repr(C)]
pub struct LaserScan {
    /// Timestamp of scan
    pub timestamp: *const Timestamp,

    /// Frame of reference
    pub frame_id: FoxgloveString,

    /// Origin of scan relative to frame of reference; points are positioned in the x-y plane relative to this origin; angles are interpreted as counterclockwise rotations around the z axis with 0 rad being in the +x direction
    pub pose: *const Pose,

    /// Bearing of first point, in radians
    pub start_angle: f64,

    /// Bearing of last point, in radians
    pub end_angle: f64,

    /// Distance of detections from origin; assumed to be at equally-spaced angles between `start_angle` and `end_angle`
    pub ranges: *const f64,
    pub ranges_count: usize,

    /// Intensity of detections
    pub intensities: *const f64,
    pub intensities_count: usize,
}

impl LaserScan {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::LaserScan>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::LaserScan>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::LaserScan {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            start_angle: self.start_angle,
            end_angle: self.end_angle,
            ranges: unsafe {
                Vec::from_raw_parts(
                    self.ranges as *mut f64,
                    self.ranges_count,
                    self.ranges_count,
                )
            },
            intensities: unsafe {
                Vec::from_raw_parts(
                    self.intensities as *mut f64,
                    self.intensities_count,
                    self.intensities_count,
                )
            },
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_laser_scan(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&LaserScan>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { LaserScan::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_laser_scan(msg);
            e
        }
        Err(e) => {
            tracing::error!("LaserScan: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_laser_scan(mut msg: ManuallyDrop<foxglove::schemas::LaserScan>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a series of points connected by lines
#[repr(C)]
pub struct LinePrimitive {
    /// Drawing primitive to use for lines
    pub r#type: i32,

    /// Origin of lines relative to reference frame
    pub pose: *const Pose,

    /// Line thickness
    pub thickness: f64,

    /// Indicates whether `thickness` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
    pub scale_invariant: bool,

    /// Points along the line
    pub points: *const *const Point3,
    pub points_count: usize,

    /// Solid color to use for the whole line. One of `color` or `colors` must be provided.
    pub color: *const Color,

    /// Per-point colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
    pub colors: *const *const Color,
    pub colors_count: usize,

    /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
    ///
    /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
    pub indices: *const u32,
    pub indices_count: usize,
}

impl LinePrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::LinePrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::LinePrimitive {
            r#type: self.r#type,
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            thickness: self.thickness,
            scale_invariant: self.scale_invariant,
            points: unsafe { std::slice::from_raw_parts(self.points, self.points_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            colors: unsafe { std::slice::from_raw_parts(self.colors, self.colors_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            indices: unsafe {
                Vec::from_raw_parts(
                    self.indices as *mut u32,
                    self.indices_count,
                    self.indices_count,
                )
            },
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_line_primitive(mut msg: ManuallyDrop<foxglove::schemas::LinePrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.points) {
        free_point3(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.colors) {
        free_color(ManuallyDrop::new(nested));
    }
}

/// A navigation satellite fix for any Global Navigation Satellite System
#[repr(C)]
pub struct LocationFix {
    /// Timestamp of the message
    pub timestamp: *const Timestamp,

    /// Frame for the sensor. Latitude and longitude readings are at the origin of the frame.
    pub frame_id: FoxgloveString,

    /// Latitude in degrees
    pub latitude: f64,

    /// Longitude in degrees
    pub longitude: f64,

    /// Altitude in meters
    pub altitude: f64,

    /// Position covariance (m^2) defined relative to a tangential plane through the reported position. The components are East, North, and Up (ENU), in row-major order.
    pub position_covariance: [f64; 9],

    /// If `position_covariance` is available, `position_covariance_type` must be set to indicate the type of covariance.
    pub position_covariance_type: i32,
}

impl LocationFix {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::LocationFix>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::LocationFix>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::LocationFix {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            latitude: self.latitude,
            longitude: self.longitude,
            altitude: self.altitude,
            position_covariance: unsafe {
                Vec::from_raw_parts(
                    self.position_covariance.as_ptr() as *mut f64,
                    self.position_covariance.len(),
                    self.position_covariance.len(),
                )
            },
            position_covariance_type: self.position_covariance_type,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_location_fix(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&LocationFix>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { LocationFix::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_location_fix(msg);
            e
        }
        Err(e) => {
            tracing::error!("LocationFix: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_location_fix(mut msg: ManuallyDrop<foxglove::schemas::LocationFix>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A log message
#[repr(C)]
pub struct Log {
    /// Timestamp of log message
    pub timestamp: *const Timestamp,

    /// Log level
    pub level: i32,

    /// Log message
    pub message: FoxgloveString,

    /// Process or node name
    pub name: FoxgloveString,

    /// Filename
    pub file: FoxgloveString,

    /// Line number in the file
    pub line: u32,
}

impl Log {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Log>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Log>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Log {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            level: self.level,
            message: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.message.as_ptr() as *mut _,
                    self.message.len(),
                    self.message.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("message invalid: {}", e)))?,
            name: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.name.as_ptr() as *mut _,
                    self.name.len(),
                    self.name.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("name invalid: {}", e)))?,
            file: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.file.as_ptr() as *mut _,
                    self.file.len(),
                    self.file.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("file invalid: {}", e)))?,
            line: self.line,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_log(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Log>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Log::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_log(msg);
            e
        }
        Err(e) => {
            tracing::error!("Log: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_log(mut msg: ManuallyDrop<foxglove::schemas::Log>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// Command to remove previously published entities
#[repr(C)]
pub struct SceneEntityDeletion {
    /// Timestamp of the deletion. Only matching entities earlier than this timestamp will be deleted.
    pub timestamp: *const Timestamp,

    /// Type of deletion action to perform
    pub r#type: i32,

    /// Identifier which must match if `type` is `MATCHING_ID`.
    pub id: FoxgloveString,
}

impl SceneEntityDeletion {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneEntityDeletion>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneEntityDeletion>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::SceneEntityDeletion {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            r#type: self.r#type,
            id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.id.as_ptr() as *mut _,
                    self.id.len(),
                    self.id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("id invalid: {}", e)))?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_scene_entity_deletion(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&SceneEntityDeletion>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { SceneEntityDeletion::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_scene_entity_deletion(msg);
            e
        }
        Err(e) => {
            tracing::error!("SceneEntityDeletion: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_scene_entity_deletion(mut msg: ManuallyDrop<foxglove::schemas::SceneEntityDeletion>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference.
#[repr(C)]
pub struct SceneEntity {
    /// Timestamp of the entity
    pub timestamp: *const Timestamp,

    /// Frame of reference
    pub frame_id: FoxgloveString,

    /// Identifier for the entity. A entity will replace any prior entity on the same topic with the same `id`.
    pub id: FoxgloveString,

    /// Length of time (relative to `timestamp`) after which the entity should be automatically removed. Zero value indicates the entity should remain visible until it is replaced or deleted.
    pub lifetime: *const Duration,

    /// Whether the entity should keep its location in the fixed frame (false) or follow the frame specified in `frame_id` as it moves relative to the fixed frame (true)
    pub frame_locked: bool,

    /// Additional user-provided metadata associated with the entity. Keys must be unique.
    pub metadata: *const *const KeyValuePair,
    pub metadata_count: usize,

    /// Arrow primitives
    pub arrows: *const *const ArrowPrimitive,
    pub arrows_count: usize,

    /// Cube primitives
    pub cubes: *const *const CubePrimitive,
    pub cubes_count: usize,

    /// Sphere primitives
    pub spheres: *const *const SpherePrimitive,
    pub spheres_count: usize,

    /// Cylinder primitives
    pub cylinders: *const *const CylinderPrimitive,
    pub cylinders_count: usize,

    /// Line primitives
    pub lines: *const *const LinePrimitive,
    pub lines_count: usize,

    /// Triangle list primitives
    pub triangles: *const *const TriangleListPrimitive,
    pub triangles_count: usize,

    /// Text primitives
    pub texts: *const *const TextPrimitive,
    pub texts_count: usize,

    /// Model primitives
    pub models: *const *const ModelPrimitive,
    pub models_count: usize,
}

impl SceneEntity {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneEntity>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneEntity>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::SceneEntity {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.id.as_ptr() as *mut _,
                    self.id.len(),
                    self.id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("id invalid: {}", e)))?,
            lifetime: unsafe { self.lifetime.as_ref() }.map(|&m| m.into()),
            frame_locked: self.frame_locked,
            metadata: unsafe { std::slice::from_raw_parts(self.metadata, self.metadata_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            arrows: unsafe { std::slice::from_raw_parts(self.arrows, self.arrows_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            cubes: unsafe { std::slice::from_raw_parts(self.cubes, self.cubes_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            spheres: unsafe { std::slice::from_raw_parts(self.spheres, self.spheres_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            cylinders: unsafe { std::slice::from_raw_parts(self.cylinders, self.cylinders_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            lines: unsafe { std::slice::from_raw_parts(self.lines, self.lines_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            triangles: unsafe { std::slice::from_raw_parts(self.triangles, self.triangles_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            texts: unsafe { std::slice::from_raw_parts(self.texts, self.texts_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            models: unsafe { std::slice::from_raw_parts(self.models, self.models_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_scene_entity(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&SceneEntity>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { SceneEntity::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_scene_entity(msg);
            e
        }
        Err(e) => {
            tracing::error!("SceneEntity: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_scene_entity(mut msg: ManuallyDrop<foxglove::schemas::SceneEntity>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.metadata) {
        free_key_value_pair(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.arrows) {
        free_arrow_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.cubes) {
        free_cube_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.spheres) {
        free_sphere_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.cylinders) {
        free_cylinder_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.lines) {
        free_line_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.triangles) {
        free_triangle_list_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.texts) {
        free_text_primitive(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.models) {
        free_model_primitive(ManuallyDrop::new(nested));
    }
}

/// An update to the entities displayed in a 3D scene
#[repr(C)]
pub struct SceneUpdate {
    /// Scene entities to delete
    pub deletions: *const *const SceneEntityDeletion,
    pub deletions_count: usize,

    /// Scene entities to add or replace
    pub entities: *const *const SceneEntity,
    pub entities_count: usize,
}

impl SceneUpdate {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneUpdate>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::SceneUpdate>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::SceneUpdate {
            deletions: unsafe { std::slice::from_raw_parts(self.deletions, self.deletions_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            entities: unsafe { std::slice::from_raw_parts(self.entities, self.entities_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_scene_update(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&SceneUpdate>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { SceneUpdate::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_scene_update(msg);
            e
        }
        Err(e) => {
            tracing::error!("SceneUpdate: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_scene_update(mut msg: ManuallyDrop<foxglove::schemas::SceneUpdate>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.deletions) {
        free_scene_entity_deletion(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.entities) {
        free_scene_entity(ManuallyDrop::new(nested));
    }
}

/// A primitive representing a 3D model file loaded from an external URL or embedded data
#[repr(C)]
pub struct ModelPrimitive {
    /// Origin of model relative to reference frame
    pub pose: *const Pose,

    /// Scale factor to apply to the model along each axis
    pub scale: *const Vector3,

    /// Solid color to use for the whole model if `override_color` is true.
    pub color: *const Color,

    /// Whether to use the color specified in `color` instead of any materials embedded in the original model.
    pub override_color: bool,

    /// URL pointing to model file. One of `url` or `data` should be provided.
    pub url: FoxgloveString,

    /// [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided.
    pub media_type: FoxgloveString,

    /// Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data.
    pub data: *const c_uchar,
    pub data_len: usize,
}

impl ModelPrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::ModelPrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::ModelPrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            scale: unsafe { self.scale.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            override_color: self.override_color,
            url: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.url.as_ptr() as *mut _,
                    self.url.len(),
                    self.url.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("url invalid: {}", e)))?,
            media_type: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.media_type.as_ptr() as *mut _,
                    self.media_type.len(),
                    self.media_type.len(),
                ))
            }
            .map_err(|e| {
                foxglove::FoxgloveError::Utf8Error(format!("media_type invalid: {}", e))
            })?,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_model_primitive(mut msg: ManuallyDrop<foxglove::schemas::ModelPrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A field present within each element in a byte array of packed elements.
#[repr(C)]
pub struct PackedElementField {
    /// Name of the field
    pub name: FoxgloveString,

    /// Byte offset from start of data buffer
    pub offset: u32,

    /// Type of data in the field. Integers are stored using little-endian byte order.
    pub r#type: i32,
}

impl PackedElementField {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::PackedElementField>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::PackedElementField>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::PackedElementField {
            name: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.name.as_ptr() as *mut _,
                    self.name.len(),
                    self.name.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("name invalid: {}", e)))?,
            offset: self.offset,
            r#type: self.r#type,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_packed_element_field(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&PackedElementField>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { PackedElementField::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_packed_element_field(msg);
            e
        }
        Err(e) => {
            tracing::error!("PackedElementField: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_packed_element_field(mut msg: ManuallyDrop<foxglove::schemas::PackedElementField>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A point representing a position in 2D space
#[repr(C)]
pub struct Point2 {
    /// x coordinate position
    pub x: f64,

    /// y coordinate position
    pub y: f64,
}

impl Point2 {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Point2>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Point2>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Point2 {
            x: self.x,
            y: self.y,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_point2(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Point2>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Point2::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_point2(msg);
            e
        }
        Err(e) => {
            tracing::error!("Point2: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_point2(mut msg: ManuallyDrop<foxglove::schemas::Point2>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A point representing a position in 3D space
#[repr(C)]
pub struct Point3 {
    /// x coordinate position
    pub x: f64,

    /// y coordinate position
    pub y: f64,

    /// z coordinate position
    pub z: f64,
}

impl Point3 {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Point3>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Point3>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Point3 {
            x: self.x,
            y: self.y,
            z: self.z,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_point3(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Point3>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Point3::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_point3(msg);
            e
        }
        Err(e) => {
            tracing::error!("Point3: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_point3(mut msg: ManuallyDrop<foxglove::schemas::Point3>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A collection of N-dimensional points, which may contain additional fields with information like normals, intensity, etc.
#[repr(C)]
pub struct PointCloud {
    /// Timestamp of point cloud
    pub timestamp: *const Timestamp,

    /// Frame of reference
    pub frame_id: FoxgloveString,

    /// The origin of the point cloud relative to the frame of reference
    pub pose: *const Pose,

    /// Number of bytes between points in the `data`
    pub point_stride: u32,

    /// Fields in `data`. At least 2 coordinate fields from `x`, `y`, and `z` are required for each point's position; `red`, `green`, `blue`, and `alpha` are optional for customizing each point's color.
    pub fields: *const *const PackedElementField,
    pub fields_count: usize,

    /// Point data, interpreted using `fields`
    pub data: *const c_uchar,
    pub data_len: usize,
}

impl PointCloud {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::PointCloud>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::PointCloud>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::PointCloud {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            point_stride: self.point_stride,
            fields: unsafe { std::slice::from_raw_parts(self.fields, self.fields_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_point_cloud(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&PointCloud>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { PointCloud::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_point_cloud(msg);
            e
        }
        Err(e) => {
            tracing::error!("PointCloud: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_point_cloud(mut msg: ManuallyDrop<foxglove::schemas::PointCloud>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.fields) {
        free_packed_element_field(ManuallyDrop::new(nested));
    }
}

/// An array of points on a 2D image
#[repr(C)]
pub struct PointsAnnotation {
    /// Timestamp of annotation
    pub timestamp: *const Timestamp,

    /// Type of points annotation to draw
    pub r#type: i32,

    /// Points in 2D image coordinates (pixels).
    /// These coordinates use the top-left corner of the top-left pixel of the image as the origin.
    pub points: *const *const Point2,
    pub points_count: usize,

    /// Outline color
    pub outline_color: *const Color,

    /// Per-point colors, if `type` is `POINTS`, or per-segment stroke colors, if `type` is `LINE_LIST`, `LINE_STRIP` or `LINE_LOOP`.
    pub outline_colors: *const *const Color,
    pub outline_colors_count: usize,

    /// Fill color
    pub fill_color: *const Color,

    /// Stroke thickness in pixels
    pub thickness: f64,
}

impl PointsAnnotation {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::PointsAnnotation>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::PointsAnnotation>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::PointsAnnotation {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            r#type: self.r#type,
            points: unsafe { std::slice::from_raw_parts(self.points, self.points_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
            outline_color: unsafe { self.outline_color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            outline_colors: unsafe {
                std::slice::from_raw_parts(self.outline_colors, self.outline_colors_count)
            }
            .iter()
            .flat_map(|m| unsafe {
                m.as_ref()
                    .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
            })
            .collect::<Result<Vec<_>, _>>()?,
            fill_color: unsafe { self.fill_color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            thickness: self.thickness,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_points_annotation(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&PointsAnnotation>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { PointsAnnotation::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_points_annotation(msg);
            e
        }
        Err(e) => {
            tracing::error!("PointsAnnotation: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_points_annotation(mut msg: ManuallyDrop<foxglove::schemas::PointsAnnotation>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.points) {
        free_point2(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.outline_colors) {
        free_color(ManuallyDrop::new(nested));
    }
}

/// A position and orientation for an object or reference frame in 3D space
#[repr(C)]
pub struct Pose {
    /// Point denoting position in 3D space
    pub position: *const Vector3,

    /// Quaternion denoting orientation in 3D space
    pub orientation: *const Quaternion,
}

impl Pose {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Pose>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Pose>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Pose {
            position: unsafe { self.position.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            orientation: unsafe { self.orientation.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_pose(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Pose>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Pose::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_pose(msg);
            e
        }
        Err(e) => {
            tracing::error!("Pose: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_pose(mut msg: ManuallyDrop<foxglove::schemas::Pose>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A timestamped pose for an object or reference frame in 3D space
#[repr(C)]
pub struct PoseInFrame {
    /// Timestamp of pose
    pub timestamp: *const Timestamp,

    /// Frame of reference for pose position and orientation
    pub frame_id: FoxgloveString,

    /// Pose in 3D space
    pub pose: *const Pose,
}

impl PoseInFrame {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::PoseInFrame>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::PoseInFrame>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::PoseInFrame {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_pose_in_frame(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&PoseInFrame>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { PoseInFrame::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_pose_in_frame(msg);
            e
        }
        Err(e) => {
            tracing::error!("PoseInFrame: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_pose_in_frame(mut msg: ManuallyDrop<foxglove::schemas::PoseInFrame>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// An array of timestamped poses for an object or reference frame in 3D space
#[repr(C)]
pub struct PosesInFrame {
    /// Timestamp of pose
    pub timestamp: *const Timestamp,

    /// Frame of reference for pose position and orientation
    pub frame_id: FoxgloveString,

    /// Poses in 3D space
    pub poses: *const *const Pose,
    pub poses_count: usize,
}

impl PosesInFrame {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::PosesInFrame>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::PosesInFrame>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::PosesInFrame {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            poses: unsafe { std::slice::from_raw_parts(self.poses, self.poses_count) }
                .iter()
                .flat_map(|m| unsafe {
                    m.as_ref()
                        .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                })
                .collect::<Result<Vec<_>, _>>()?,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_poses_in_frame(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&PosesInFrame>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { PosesInFrame::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_poses_in_frame(msg);
            e
        }
        Err(e) => {
            tracing::error!("PosesInFrame: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_poses_in_frame(mut msg: ManuallyDrop<foxglove::schemas::PosesInFrame>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.poses) {
        free_pose(ManuallyDrop::new(nested));
    }
}

/// A [quaternion](https://eater.net/quaternions) representing a rotation in 3D space
#[repr(C)]
pub struct Quaternion {
    /// x value
    pub x: f64,

    /// y value
    pub y: f64,

    /// z value
    pub z: f64,

    /// w value
    pub w: f64,
}

impl Quaternion {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Quaternion>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Quaternion>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Quaternion {
            x: self.x,
            y: self.y,
            z: self.z,
            w: self.w,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_quaternion(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Quaternion>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Quaternion::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_quaternion(msg);
            e
        }
        Err(e) => {
            tracing::error!("Quaternion: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_quaternion(mut msg: ManuallyDrop<foxglove::schemas::Quaternion>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A single block of an audio bitstream
#[repr(C)]
pub struct RawAudio {
    /// Timestamp of the start of the audio block
    pub timestamp: *const Timestamp,

    /// Audio data. The samples in the data must be interleaved and little-endian
    pub data: *const c_uchar,
    pub data_len: usize,

    /// Audio format. Only 'pcm-s16' is currently supported
    pub format: FoxgloveString,

    /// Sample rate in Hz
    pub sample_rate: u32,

    /// Number of channels in the audio block
    pub number_of_channels: u32,
}

impl RawAudio {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::RawAudio>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::RawAudio>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::RawAudio {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
            format: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.format.as_ptr() as *mut _,
                    self.format.len(),
                    self.format.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("format invalid: {}", e)))?,
            sample_rate: self.sample_rate,
            number_of_channels: self.number_of_channels,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_raw_audio(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&RawAudio>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { RawAudio::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_raw_audio(msg);
            e
        }
        Err(e) => {
            tracing::error!("RawAudio: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_raw_audio(mut msg: ManuallyDrop<foxglove::schemas::RawAudio>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A raw image
#[repr(C)]
pub struct RawImage {
    /// Timestamp of image
    pub timestamp: *const Timestamp,

    /// Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image.
    pub frame_id: FoxgloveString,

    /// Image width
    pub width: u32,

    /// Image height
    pub height: u32,

    /// Encoding of the raw image data
    ///
    /// Supported values: `8UC1`, `8UC3`, `16UC1` (little endian), `32FC1` (little endian), `bayer_bggr8`, `bayer_gbrg8`, `bayer_grbg8`, `bayer_rggb8`, `bgr8`, `bgra8`, `mono8`, `mono16`, `rgb8`, `rgba8`, `uyvy` or `yuv422`, `yuyv` or `yuv422_yuy2`
    pub encoding: FoxgloveString,

    /// Byte length of a single row
    pub step: u32,

    /// Raw image data
    pub data: *const c_uchar,
    pub data_len: usize,
}

impl RawImage {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::RawImage>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::RawImage>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::RawImage {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            frame_id: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.frame_id.as_ptr() as *mut _,
                    self.frame_id.len(),
                    self.frame_id.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("frame_id invalid: {}", e)))?,
            width: self.width,
            height: self.height,
            encoding: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.encoding.as_ptr() as *mut _,
                    self.encoding.len(),
                    self.encoding.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("encoding invalid: {}", e)))?,
            step: self.step,
            data: unsafe {
                Bytes::from_static(std::slice::from_raw_parts(self.data, self.data_len))
            },
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_raw_image(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&RawImage>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { RawImage::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_raw_image(msg);
            e
        }
        Err(e) => {
            tracing::error!("RawImage: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_raw_image(mut msg: ManuallyDrop<foxglove::schemas::RawImage>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a sphere or ellipsoid
#[repr(C)]
pub struct SpherePrimitive {
    /// Position of the center of the sphere and orientation of the sphere
    pub pose: *const Pose,

    /// Size (diameter) of the sphere along each axis
    pub size: *const Vector3,

    /// Color of the sphere
    pub color: *const Color,
}

impl SpherePrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::SpherePrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::SpherePrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            size: unsafe { self.size.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_sphere_primitive(mut msg: ManuallyDrop<foxglove::schemas::SpherePrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A text label on a 2D image
#[repr(C)]
pub struct TextAnnotation {
    /// Timestamp of annotation
    pub timestamp: *const Timestamp,

    /// Bottom-left origin of the text label in 2D image coordinates (pixels).
    /// The coordinate uses the top-left corner of the top-left pixel of the image as the origin.
    pub position: *const Point2,

    /// Text to display
    pub text: FoxgloveString,

    /// Font size in pixels
    pub font_size: f64,

    /// Text color
    pub text_color: *const Color,

    /// Background fill color
    pub background_color: *const Color,
}

impl TextAnnotation {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::TextAnnotation>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::TextAnnotation>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::TextAnnotation {
            timestamp: unsafe { self.timestamp.as_ref() }.map(|&m| m.into()),
            position: unsafe { self.position.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            text: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.text.as_ptr() as *mut _,
                    self.text.len(),
                    self.text.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("text invalid: {}", e)))?,
            font_size: self.font_size,
            text_color: unsafe { self.text_color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            background_color: unsafe {
                self.background_color.as_ref().map(|m| m.borrow_to_native())
            }
            .transpose()?
            .map(|m| ManuallyDrop::into_inner(m)),
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_text_annotation(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&TextAnnotation>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { TextAnnotation::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_text_annotation(msg);
            e
        }
        Err(e) => {
            tracing::error!("TextAnnotation: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_text_annotation(mut msg: ManuallyDrop<foxglove::schemas::TextAnnotation>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a text label
#[repr(C)]
pub struct TextPrimitive {
    /// Position of the center of the text box and orientation of the text. Identity orientation means the text is oriented in the xy-plane and flows from -x to +x.
    pub pose: *const Pose,

    /// Whether the text should respect `pose.orientation` (false) or always face the camera (true)
    pub billboard: bool,

    /// Font size (height of one line of text)
    pub font_size: f64,

    /// Indicates whether `font_size` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
    pub scale_invariant: bool,

    /// Color of the text
    pub color: *const Color,

    /// Text
    pub text: FoxgloveString,
}

impl TextPrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::TextPrimitive>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::TextPrimitive {
            pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            billboard: self.billboard,
            font_size: self.font_size,
            scale_invariant: self.scale_invariant,
            color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                .transpose()?
                .map(|m| ManuallyDrop::into_inner(m)),
            text: unsafe {
                String::from_utf8(Vec::from_raw_parts(
                    self.text.as_ptr() as *mut _,
                    self.text.len(),
                    self.text.len(),
                ))
            }
            .map_err(|e| foxglove::FoxgloveError::Utf8Error(format!("text invalid: {}", e)))?,
        }))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_text_primitive(mut msg: ManuallyDrop<foxglove::schemas::TextPrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A primitive representing a set of triangles or a surface tiled by triangles
#[repr(C)]
pub struct TriangleListPrimitive {
    /// Origin of triangles relative to reference frame
    pub pose: *const Pose,

    /// Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...)
    pub points: *const *const Point3,
    pub points_count: usize,

    /// Solid color to use for the whole shape. One of `color` or `colors` must be provided.
    pub color: *const Color,

    /// Per-vertex colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
    pub colors: *const *const Color,
    pub colors_count: usize,

    /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
    ///
    /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
    pub indices: *const u32,
    pub indices_count: usize,
}

impl TriangleListPrimitive {
    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::TriangleListPrimitive>, foxglove::FoxgloveError>
    {
        Ok(ManuallyDrop::new(
            foxglove::schemas::TriangleListPrimitive {
                pose: unsafe { self.pose.as_ref().map(|m| m.borrow_to_native()) }
                    .transpose()?
                    .map(|m| ManuallyDrop::into_inner(m)),
                points: unsafe { std::slice::from_raw_parts(self.points, self.points_count) }
                    .iter()
                    .flat_map(|m| unsafe {
                        m.as_ref()
                            .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                    })
                    .collect::<Result<Vec<_>, _>>()?,
                color: unsafe { self.color.as_ref().map(|m| m.borrow_to_native()) }
                    .transpose()?
                    .map(|m| ManuallyDrop::into_inner(m)),
                colors: unsafe { std::slice::from_raw_parts(self.colors, self.colors_count) }
                    .iter()
                    .flat_map(|m| unsafe {
                        m.as_ref()
                            .map(|m| m.borrow_to_native().map(|m| ManuallyDrop::into_inner(m)))
                    })
                    .collect::<Result<Vec<_>, _>>()?,
                indices: unsafe {
                    Vec::from_raw_parts(
                        self.indices as *mut u32,
                        self.indices_count,
                        self.indices_count,
                    )
                },
            },
        ))
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_triangle_list_primitive(mut msg: ManuallyDrop<foxglove::schemas::TriangleListPrimitive>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
    for nested in std::mem::take(&mut msg.points) {
        free_point3(ManuallyDrop::new(nested));
    }
    for nested in std::mem::take(&mut msg.colors) {
        free_color(ManuallyDrop::new(nested));
    }
}

/// A vector in 2D space that represents a direction only
#[repr(C)]
pub struct Vector2 {
    /// x coordinate length
    pub x: f64,

    /// y coordinate length
    pub y: f64,
}

impl Vector2 {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Vector2>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Vector2>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Vector2 {
            x: self.x,
            y: self.y,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_vector2(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Vector2>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Vector2::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_vector2(msg);
            e
        }
        Err(e) => {
            tracing::error!("Vector2: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_vector2(mut msg: ManuallyDrop<foxglove::schemas::Vector2>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}

/// A vector in 3D space that represents a direction only
#[repr(C)]
pub struct Vector3 {
    /// x coordinate length
    pub x: f64,

    /// y coordinate length
    pub y: f64,

    /// z coordinate length
    pub z: f64,
}

impl Vector3 {
    unsafe fn borrow_option_to_native(
        msg: Option<&Self>,
    ) -> Result<ManuallyDrop<foxglove::schemas::Vector3>, foxglove::FoxgloveError> {
        let Some(msg) = msg else {
            return Err(foxglove::FoxgloveError::ValueError(
                "msg is required".to_string(),
            ));
        };
        unsafe { msg.borrow_to_native() }
    }

    unsafe fn borrow_to_native(
        &self,
    ) -> Result<ManuallyDrop<foxglove::schemas::Vector3>, foxglove::FoxgloveError> {
        Ok(ManuallyDrop::new(foxglove::schemas::Vector3 {
            x: self.x,
            y: self.y,
            z: self.z,
        }))
    }
}

#[unsafe(no_mangle)]
pub extern "C" fn foxglove_channel_log_vector3(
    channel: Option<&FoxgloveChannel>,
    msg: Option<&Vector3>,
    log_time: Option<&u64>,
) -> FoxgloveError {
    // Safety: we're borrowing from the msg, but discard the borrowed message before returning
    match unsafe { Vector3::borrow_option_to_native(msg) } {
        Ok(msg) => {
            let e = log_msg_to_channel(channel, &*msg, log_time);
            free_vector3(msg);
            e
        }
        Err(e) => {
            tracing::error!("Vector3: {}", e);
            e.into()
        }
    }
}

#[allow(unused_mut)]
#[allow(unused_variables)]
fn free_vector3(mut msg: ManuallyDrop<foxglove::schemas::Vector3>) {
    // The only allocations we made were for Vec<Nested> fields, which may also include Vec<Nested> fields in a couple cases.
}
