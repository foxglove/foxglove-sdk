use std::{fs::File, path::Path};

fn compile_protos() {
    let proto_path = Path::new("../../schemas/proto");
    let out_dir = Path::new("python/foxglove/_protobuf");

    // Create output directory if it doesn't exist
    std::fs::create_dir_all(out_dir).unwrap();

    // Find all .proto files
    let mut proto_files = Vec::new();
    for entry in walkdir::WalkDir::new(proto_path) {
        let entry = entry.unwrap();
        let path = entry.path().to_owned();
        if path.extension().and_then(|s| s.to_str()) == Some("proto") {
            proto_files.push(path);
        }
    }
    proto_files.sort();

    // Generate __init__.py imports
    let mut init_imports = Vec::new();
    for path in &proto_files {
        let proto_name = path.file_stem().unwrap().to_str().unwrap();
        init_imports.push(format!(
            "from .foxglove.{}_pb2 import {}",
            proto_name, proto_name
        ));
    }

    // Write __init__.py
    let init_path = out_dir.join("__init__.py");
    std::fs::write(init_path, init_imports.join("\n") + "\n").unwrap();
}

fn build_module() {
    // let dest_file = Path::new("src/py_module.rs");
    // let mut module = File::create(dest_file).expect("py_module.rs should be created");
    // writeln!(module, "// This file is @generated by foxglove-proto-gen")
    //     .expect("failed to write py_module.rs");
    import_schemas();
}

fn import_schemas() {
    let src_dir = Path::new("../../schemas/pyclass");
    let dest_dir = Path::new("src/py_module");

    std::fs::create_dir_all(dest_dir).unwrap();

    for entry in std::fs::read_dir(src_dir).unwrap() {
        println!("{}", dest_dir.display());
        let entry = entry.unwrap();
        let path = entry.path();
        if path.is_file() {
            println!("cargo:rerun-if-changed={}", path.display());
            let dest_file = dest_dir.join(&path.file_name().expect("path should be a file"));
            std::fs::copy(&path, &dest_file).expect("schema should be copied by build script");
        }
    }
}

fn main() {
    // compile_protos();
    build_module();
}
