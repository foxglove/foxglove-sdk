import { generateFlatbuffer } from "./generateFlatbuffer";
import { exampleEnum, exampleMessage } from "./testFixtures";

describe("generateFlatBuffer", () => {
  it("generates Message .fbs files", () => {
    expect(generateFlatbuffer(exampleMessage)).toMatchInlineSnapshot(`
    "// Generated by https://github.com/foxglove/schemas
    
    include "ByteVectorForNesting.fbs";
    include "Duration.fbs";
    include "ExampleEnum.fbs";
    include "NestedMessage.fbs";
    include "Time.fbs";
    
    namespace foxglove;
    
    /// An example type
    table ExampleMessage {
      /// duration field
      field_duration:Duration;
    
      /// time field
      field_time:Time;
    
      /// boolean field
      field_boolean:bool;
    
      /// bytes field
      field_bytes:[byte];
    
      /// float64 field
      field_float64:double;
    
      /// uint32 field
      field_uint32:uint;
    
      /// string field
      field_string:string;
    
      /// duration array field
      field_duration_array:[Duration];
    
      /// time array field
      field_time_array:[Time];
    
      /// boolean array field
      field_boolean_array:[bool];
    
      /// bytes array field
      field_bytes_array:[ByteVectorForNesting];
    
      /// float64 array field
      field_float64_array:[double];
    
      /// uint32 array field
      field_uint32_array:[uint];
    
      /// string array field
      field_string_array:[string];
    
      /// duration fixed-length array field
      /// length 3
      field_duration_fixed_array:[Duration];
    
      /// time fixed-length array field
      /// length 3
      field_time_fixed_array:[Time];
    
      /// boolean fixed-length array field
      /// length 3
      field_boolean_fixed_array:[bool];
    
      /// bytes fixed-length array field
      /// length 3
      field_bytes_fixed_array:[ByteVectorForNesting];
    
      /// float64 fixed-length array field
      /// length 3
      field_float64_fixed_array:[double];
    
      /// uint32 fixed-length array field
      /// length 3
      field_uint32_fixed_array:[uint];
    
      /// string fixed-length array field
      /// length 3
      field_string_fixed_array:[string];
    
      /// An enum field
      field_enum:ExampleEnum;
    
      /// An enum array field
      field_enum_array:[ExampleEnum];
    
      /// A nested field
      field_nested:foxglove.NestedMessage;
    
      /// A nested array field
      /// With
      /// a
      /// very
      /// long
      /// description
      field_nested_array:[foxglove.NestedMessage];
    }

    root_type ExampleMessage;
    "
    `);
  });
  it("generates Enum .fbs files", () => {
    expect(generateFlatbuffer(exampleEnum)).toMatchInlineSnapshot(`
    "// Generated by https://github.com/foxglove/schemas

    namespace foxglove;

    /// An example enum
    enum ExampleEnum : byte {
      /// Value A
      A = 1,

      /// Value B
      B = 2,
    }

    "
    `);
  });
});
